AOP:面向切面编程==>指的是在程序运行期间，将某段代码动态地切入到指定方法的指定位置并运行的编程思想。
    1、JDK动态代理
    缺点：
        a.写法复杂；
        b.如果目标对象没有实现任何接口，无法使用动态代理创建出代理对象。
    2、Spring提供的AOP（底层实现原理就是动态代理）
        1）相关术语
            1.1）连接点(Joinpoint)：程序执行的某个特定位置：如类开始初始化前、类初始化后、类某个方法调用前、调用后、方法抛出异常后。 就是定义了哪一些地方是可以切入的，也就是所有允许你通知的地方。
            1.2）切点(Pointcut)：AOP通过“切点”定位特定的连接点。连接点相当于数据库中的记录，而切点相当于查询条件。切点和连接点不是一对一的关系，一个切点可以匹配多个连接点。
            1.3）通知(Advice)：通知是织入到目标类连接点上的一段程序代码，在Spring中，通知除用于描述一段程序代码外，还拥有另一个和连接点相关的信息，这便是执行点的方位。结合执行点方位信息和切点信息，我们就可以找到特定的连接点。
            1.4）目标对象(Target)：通知逻辑的织入目标类。如果没有AOP，目标业务类需要自己实现所有逻辑，而在AOP的帮助下，目标业务类只实现那些非横切逻辑的程序逻辑，而性能监视和事务管理等这些横切逻辑则可以使用AOP动态织入到特定的连接点上。
            1.5）引介(Introduction)：引介是一种特殊的通知，它为类添加一些属性和方法。这样，即使一个业务类原本没有实现某个接口，通过AOP的引介功能，我们可以动态地为该业务类添加接口的实现逻辑，让业务类成为这个接口的实现类。
            1.6）织入(Weaving)： 织入是将通知添加对目标类具体连接点上的过程。
            1.7）代理(Proxy)：一个类被AOP织入通知后，就产出了一个结果类，它是融合了原类和通知逻辑的代理类。根据不同的代理方式，代理类既可能是和原类具有相同接口的类，也可能就是原类的子类，所以我们可以采用调用原类相同的方式调用代理类。
            1.8）切面(Aspect)： 切面由切点和通知组成，它既包括了横切逻辑的定义，也包括了连接点的定义，Spring AOP就是负责实施切面的框架，它将切面所定义的横切逻辑织入到切面所指定的连接点中。

    3、抽取可重用的切入点表达式
        步骤：
            1）随便声明一个没有实现的返回void的空方法
            2）给方法标注@Pointcut注解

    4、AOP应用场景
        1）加日志保存到数据库；
        2）权限验证；
        3）安全检查；
        4）事务控制。

    5.AOP的使用步骤
        1）基于注解方式
            a）将目标类和切面类加入到Spring容器中
            b）告诉Spring哪个切面类
            c）在切面类中使用五个通知注解来配置切面
            d）开启基于注解的AOP功能
        2）基于XML配置的AOP
            a）
